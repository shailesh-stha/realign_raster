# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RealignRasterDialog
                                 A QGIS plugin
 This plugin allows you to easily realign any multi-band raster image to a reference raster, ensuring accurate spatial alignment.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by shailesh-stha
        email                : shailesh.shrestha@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.gui import *
from qgis.PyQt.QtGui import (QColor, QLinearGradient, QPainter, QPalette)
from qgis.core import *
from PyQt5.QtCore import *
from qgis.utils import iface
from qgis.PyQt.QtWidgets import QAction, QMainWindow

import subprocess
from osgeo import gdal, osr, ogr
import numpy as np


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'realign_raster_dialog_base.ui'))


class RealignRasterDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RealignRasterDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
                
        self.pbRR_RealignRaster.clicked.connect(self.RealignRaster)

    def RealignRaster(self):
        # Read Extents and Origin Coordinates
        input_raster_file = self.qRR_InputRasterFile.filePath()
        if not input_raster_file:
            # Read and open layer from qgis
            simulation_raster = self.cbRR_RasterLayer.currentLayer()
            input_raster = gdal.Open(simulation_raster.source())
            file_name = os.path.basename(simulation_raster.source())
        else:
            # Read and open layer from file
            input_raster = gdal.Open(input_raster_file)
            file_name = os.path.basename(input_raster_file)
        
        # Extract filename and extension
        file_suffix, file_extension = os.path.splitext(file_name)
        
        # Extract input file information
        x_min = float(self.qRR_ExtentGroupBox.outputExtent().xMinimum())
        y_max = float(self.qRR_ExtentGroupBox.outputExtent().yMaximum())
        crs = self.qRR_ExtentGroupBox.outputCrs()
        crs_2 = self.qRR_Projection.crs()
        if crs_2.authid().split(":")[-1] != "":
            crs = crs_2
        epsg = int(crs.authid().split(':')[1])
        
        # read input file cell size
        x_res, y_res = input_raster.GetGeoTransform()[1], -input_raster.GetGeoTransform()[5] 

        # read cell size from GUI
        cell_size = float(self.sbRR_CellSize.value())
        if cell_size != 0:
            x_res = y_res = cell_size
                
        # assign projection and geotransformation
        input_raster.SetProjection("EPSG:" + str(epsg))
        geotransfrom = (float(x_min), x_res, 0.0, float(y_max), 0.0, -y_res)
        input_raster.SetGeoTransform(geotransfrom)
        
        # save raster
        save_folder_path = self.qRR_SaveFolderLocation.filePath()
        output_raster = os.path.join(save_folder_path, f"{file_suffix}_realigned{file_extension}")
        driver = gdal.GetDriverByName("GTiff")
        driver.CreateCopy(output_raster, input_raster)
        
        # Clean ups
        input_raster = None
        output_raster = None
    
    def unload(self):
        # Reset the state or clean up resources as needed
        self.qRR_InputRasterFile.clear()
        self.qRR_ExtentGroupBox.reset()
        self.qRR_Projection.reset()
        self.sbRR_CellSize.setValue(0)  # Reset cell size
        self.qRR_SaveFolderLocation.clear()